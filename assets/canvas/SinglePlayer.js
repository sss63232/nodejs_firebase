// -- user code here --
import Ball from './prefabs/Ball';
import Paddle from './prefabs/Paddle';
import Back from './prefabs/Back';
import Heart from './prefabs/Heart';
import MuteBtn from './prefabs/MuteBtn';

import Facade from '../../src/puremvc/core/patterns/facade/Facade';
/* --- start generated code --- */

// Generated by Phaser Editor 1.4.3 (Phaser v2.6.2)


class SinglePlayer extends Phaser.State {
	
	/**
	 * SinglePlayer.
	 */
	constructor() {
		
		super();
		
	}
	
	init() {
		
		this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
		
	}
	
	preload () {
		
		this.load.pack('preloader', 'assets/pack.json');
		
	}
	
	create() {
		this.add.sprite(-352, -132, 'bg');
		
		var _back = new Back(this.game, 235, 165);
		this.add.existing(_back);
		
		var _paddles = this.add.group();
		
		var _paddle_down = new Paddle(this.game, 87, 425);
		_paddles.add(_paddle_down);
		
		var _backs = this.add.group();
		_backs.position.setTo(-2, -2);
		
		this.add.text(274, 220, 'Back', {"font":"bold 20px Arial"}, _backs);
		
		var _mute = new MuteBtn(this.game, 291, 12);
		this.add.existing(_mute);
		
		var _score_text = this.add.text(11, 14, 'scoreText', {"font":"bold 20px Arial"});
		
		var _info_down = this.add.text(124, 223, 'infoText', {"font":"bold 20px Arial"});
		
		var _heart_down = new Heart(this.game, 246, 9);
		this.add.existing(_heart_down);
		
		var _ball = new Ball(this.game, 130, 365);
		this.add.existing(_ball);
		
		
		
		// public fields
		
		this.fBack = _back;
		this.fPaddle_down = _paddle_down;
		this.fMute = _mute;
		this.fScore_text = _score_text;
		this.fInfo_down = _info_down;
		this.fHeart_down = _heart_down;
		this.fBall = _ball;
		// user code
		this.initObjects();
		Facade.getInstance('Game').sendNotification('GAME_SCENE_CHANGED');
		
	}
	
	/* state-methods-begin */
	// -- user code here --
	initObjects() {
		this.fPaddle_down.alignIn(this.game.world.bounds, Phaser.BOTTOM_CENTER);
		this.game.music = this.game.add.audio('fight');
		this.game.music.play();
	}

	shutdown() {
		Facade.getInstance('Game').sendNotification('GAME_SCENE_SHUTDOWN');
	}
	/* state-methods-end */
	
}
/* --- end generated code --- */
// -- user code here --
export default SinglePlayer;